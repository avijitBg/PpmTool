package com.example.demo.web;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.domain.Project;
import com.example.demo.service.MapValidationService;
import com.example.demo.service.ProjectService;

@RestController
@RequestMapping("/api/project")
public class ProjectController {
	@Autowired
	private ProjectService projectService;
	@Autowired
	private MapValidationService mapValidationError;
	@CrossOrigin(origins="http://localhost:3000")
	@PostMapping("")
	public ResponseEntity<?>createProject(@Valid @RequestBody Project project, BindingResult result){
		ResponseEntity<?>errorMap = mapValidationError.mapValidation(result);
		if(errorMap!=null) {
			return errorMap;
		}
		Project project1 = projectService.saveOrUpdate(project);
		return new ResponseEntity<Project>(project1, HttpStatus.CREATED);
	}
	@CrossOrigin(origins="http://localhost:3000")
	@GetMapping("/{projectId}")
	public ResponseEntity<?>findProjectByProjectIdentifier(@PathVariable String projectId){
		Project project = projectService.findByProjectIdentifier(projectId.toUpperCase());
		return new ResponseEntity<Project>(project, HttpStatus.OK);
	}
	@CrossOrigin(origins="http://localhost:3000")
	@GetMapping("/allProjects")
	public ResponseEntity<?>findAllProjects(){
		Iterable<Project>allProjects = projectService.listAll();
		return new ResponseEntity<Iterable<Project>>(allProjects, HttpStatus.OK);
	}
	@DeleteMapping("/{projectId}")
	public ResponseEntity<?>deleteProjectByProjectIdentifier(@PathVariable String projectId){
		projectService.deleteProjectByProjectIdentifier(projectId.toUpperCase());
		return new ResponseEntity<String>("Project with identifier "+projectId+" deleted!", HttpStatus.OK);
	}
}
