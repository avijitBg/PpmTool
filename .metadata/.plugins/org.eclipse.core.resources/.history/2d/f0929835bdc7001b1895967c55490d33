package com.example.demo.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.demo.domain.Backlog;
import com.example.demo.domain.Project;
import com.example.demo.domain.ProjectStatus;
import com.example.demo.domain.ProjectTask;
import com.example.demo.exception.ProjectIdException;
import com.example.demo.repository.BacklogRepository;
import com.example.demo.repository.ProjectTaskRepository;

@Service
public class ProjectTaskService {
	@Autowired
	private BacklogRepository backlogRepo;
	@Autowired
	private ProjectTaskRepository projectTaskRepo;
	
	public ProjectTask addProjectTask(String projectIdentifier, ProjectTask projectTask) {
		//PTs to be added to a specific project; project !=null and backlog exists
		Backlog backlog = backlogRepo.findByProjectIdentifier(projectIdentifier);
		
    	try{
    		//set the backlog to PT
    		projectTask.setBacklog(backlog);
    		//We want our project sequence to be like this: PROJ0-1, PROJ0-2...and persist the sequence even when a PT is deleted
    		Integer BacklogSequence = backlog.getPTSequence();
    		//Update the BL
    		BacklogSequence++;
    		backlog.setPTSequence(BacklogSequence);
    		//Add sequence to project task
            projectTask.setProjectSequence(projectIdentifier+"-"+BacklogSequence);
            projectTask.setProjectIdentifier(projectIdentifier);
    		//Initialize priority when it's null
            if(projectTask.getPriority()==null || projectTask.getPriority()==0) {
            	projectTask.setPriority(3);
            }
    		//Initialize status when null
            if(projectTask.getStatus()==null){
                projectTask.setStatus(ProjectStatus.TO_DO);
            }
    		return projectTaskRepo.save(projectTask);
    	}
    	catch(Exception e) {
    		throw new ProjectIdException("Project identifier "+projectIdentifier.toUpperCase()+" dosen't exist!"); 		
    	}     
	}

	public List<ProjectTask> findBacklogById(String backlog_id) {
		List<ProjectTask> allProjectTasks = projectTaskRepo.findByProjectIdentifierOrderByPriority(backlog_id);
		if(allProjectTasks.isEmpty()) {
			throw new ProjectIdException("Project backlog "+backlog_id.toUpperCase()+" dosen't exist!"); 
		}
		return allProjectTasks;
	}
	
//    public Iterable<ProjectTask>findBacklogById(String id){
//        return projectTaskRepo.findByProjectIdentifierOrderByPriority(id);
//    }
	
	public ProjectTask findProjectTaskBySequence(String backlog_id, String sequence) {
    	ProjectTask projectTask = projectTaskRepo.findByProjectSequence(sequence);
    	if(projectTask==null) {
    		//throw new ProjectIdException("Project sequence "+projectTask.getProjectIdentifier().toUpperCase()+" doen't exist!");
    		throw new ProjectIdException("Error! Requested item couldn't be found!");
    	}
    	else {
    		return projectTask;
    	}
		//return projectTaskRepo.findByProjectSequence(sequence);
	}
	
//    public Project updateProjectTask(ProjectTask updatedProjectTask){
//   	 
//        updatedProject.setProjectIdentifier(updatedProject.getProjectIdentifier().toUpperCase());
//     
//        Project oldProject = repo.findByProjectIdentifier(updatedProject.getProjectIdentifier());
//        if(oldProject == null){
//            throw new ProjectIdException(String.format("Cannot update project as Project ID: %s does not exist", updatedProject.getProjectIdentifier()));
//        }
//     
//        updatedProject.setId(oldProject.getId());
//        updatedProject.setBacklog(oldProject.getBacklog());
//        return repo.save(updatedProject);
//     
//    }

}
